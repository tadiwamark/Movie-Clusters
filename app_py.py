# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EdS1sy9diV6oPNFISAnjWlnW-eloNH51
"""

import streamlit as st
import pandas as pd
import re
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.cluster import KMeans

# Title of the web app
st.title('Movie Clustering Based on Descriptions')

@st.cache
def load_data():
    # Load the dataset
    data = pd.read_csv('tmdb_5000_movies.csv')
    return data

@st.cache
def preprocess_data(data):
    # Clean text data
    data['overview'] = data['overview'].astype(str)
    data['overview_clean'] = data['overview'].apply(lambda x: re.sub(r'[^a-zA-Z0-9\s]', '', x).lower().strip())
    return data

@st.cache(allow_output_mutation=True)
def vectorize_data(data):
    # Vectorize the cleaned text descriptions
    tfidf_vectorizer = TfidfVectorizer(stop_words='english')
    tfidf_matrix = tfidf_vectorizer.fit_transform(data['overview_clean'])
    return tfidf_matrix

def perform_clustering(tfidf_matrix):
    # Apply K-means clustering
    kmeans = KMeans(n_clusters=10, random_state=42)
    kmeans.fit(tfidf_matrix)
    return kmeans.labels_

def main():
    # Load and preprocess data
    data = load_data()
    data = preprocess_data(data)

    # Vectorize and cluster the data
    tfidf_matrix = vectorize_data(data)
    data['cluster'] = perform_clustering(tfidf_matrix)

    # Dropdown to select a cluster
    cluster_to_view = st.selectbox('Select a Cluster to View', sorted(data['cluster'].unique()))

    # Display movies in the selected cluster
    cluster_movies = data[data['cluster'] == cluster_to_view]
    st.write(cluster_movies[['title', 'overview']])

if __name__ == '__main__':
    main()